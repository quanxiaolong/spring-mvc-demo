<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation=" 
      http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd      
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd       
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd       
      http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd       
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd       
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!--<bean id="dataSource"-->
	<!--class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
	<!--<property name="driverClassName" value="${jdbc.driverClassName}" />-->
	<!--<property name="url" value="${jdbc.url}" />-->
	<!--<property name="username" value="${jdbc.username}" />-->
	<!--<property name="password" value="${jdbc.password}" />-->
	<!--</bean>-->

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 保持最小连接数 -->
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!-- 保持最大连接数 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<!-- 初始化连接数 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!-- 连接的最大空闲时间，如果超过这个时间，某个数据库连接还没有被使用，则会断开掉这个连接,单位 s -->
		<property name="maxIdleTime" value="60" />
		<!-- #连接池在无空闲连接可用时一次性创建的新数据库连接数 -->
		<property name="acquireIncrement" value="5" />
		<!-- 连接池为数据源缓存的PreparedStatement的总数。由于PreparedStatement属于单个Connection,
		所以这个数量应该根据应用中平均连接数乘以每个连接的平均PreparedStatement来计算。
		同时maxStatementsPerConnection的配置无效。 -->
		<property name="maxStatements" value="0" />
		<!-- 用来配置测试空闲连接的间隔时间。测试方式还是上面的两种之一，可以用来解决MySQL8小时断开连接的问题。
			因为它保证连接池会每隔一定时间对空闲连接进行一次测试，
			从而保证有效的空闲连接能每隔一定时间访问一次数据库，
			将于MySQL8小时无会话的状态打破。 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 连接池在获得新连接失败时重试的次数，如果小于等于0则无限重试直至连接获得成功。 -->
		<property name="acquireRetryAttempts" value="2" />
		<!--  如果为true，则当连接获取失败时自动关闭数据源，除非重新启动应用程序。所以一般不用。default : false（不建议使用） -->
		<property name="breakAfterAcquireFailure" value="false" />
		<!--  连接池在获得新连接时的间隔时间。单位ms-->
		<property name="acquireRetryDelay" value="1000"/>
		<property name="testConnectionOnCheckout" value="false" />
	</bean>

<!-- 	<bean id="pageConfig" class="cn.com.cibtc.framework.dao.mybaties.PaginationInterceptor">
		<property name="executorProvider">
			<bean id="executorProvider" class="cn.com.cibtc.framework.dao.mybaties.impl.SimpleExecutorProvider">
				<property name="pattern" value="^.*page.*$"></property>
			</bean>
		</property>
	</bean> -->


	<bean name="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mybatis/config.xml" />
		<!-- <property name="mapperLocations">
			<list>
				<value>classpath:/META-INF/mybatis/dynamic-config-mapper.xml</value>
				<value>classpath*:/META-INF/mybatis/mapper/**/*mapper.xml</value>
			</list>
		</property> -->

<!-- 		<property name="plugins">
			<list>
				<ref bean="pageConfig" />
			</list>
		</property> -->
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
				  value="cn.com.custom.member" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"></property>
	</bean>

	<!-- Transaction Configuration -->
	<bean id="matchAllTxInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="newT_*">PROPAGATION_REQUIRES_NEW</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="search*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="query*">PROPAGATION_REQUIRED</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<bean id="autoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<list>
				<idref local="matchAllTxInterceptor" />
			</list>
		</property>
		<property name="beanNames">
			<list>
				<value>*Api</value>
			</list>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- Transaction Configuration -->

</beans>
